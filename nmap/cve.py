import hashlib
import json
import re
import sys
import logging
import requests
import xmltodict

from cpe import CPE
from configparser import ConfigParser, ExtendedInterpolation

logger = logging.getLogger(__name__)

try:
    config_cve = ConfigParser(interpolation=ExtendedInterpolation())
    config_cve.read('../proteciotnet.config')

    _WIFI_XML_BASE_DIRECTORY = config_cve.get('WIFI_PATHS', 'wifi_xml_base_directory')
    _CPE_API_URL = config_cve.get('CVE_API_ONLINE', 'cpe_api_url')
    _CVE_API_URL = config_cve.get('CVE_API_ONLINE', 'cve_api_url')
    _NOTES_DIRECTORY = config_cve.get('GENERAL_PATHS', 'notes_directory')

    logger.info("Successfully loaded config file 'proteciotnet.config'")
except Exception as e:
    logger.error(f"Could not load configuration values from 'proteciotnet.config'. Error: {e}")
    exit(-3)


def extract_cve_ids(json_data: dict) -> list:
    """
    Extract CVE IDs from JSON data.

    Args:
        json_data (dict): JSON data containing vulnerability information.

    Returns:
        list: A list of CVE IDs extracted from the JSON data.
    """
    cve_ids = []
    for entry in json_data.get("vulnerabilities", []):
        cve_object = entry.get("cve", {})
        cve_id = cve_object.get("id")
        if cve_id:
            cve_ids.append(cve_id)
    logger.debug(f"Found {len(cve_ids)} CVE.\n{cve_ids}")
    return cve_ids


def merge_and_flatten(json_data: dict) -> dict:
    """
    Merge and flatten the nested lists of CVEs associated with IP addresses.

    Args:
        json_data (dict): JSON data containing IP addresses as keys and lists of CVEs as values.

    Returns:
        dict: A dictionary where IP addresses are keys and the associated list of CVEs is flattened.
    """
    result = {}

    for ip_address, cve_lists in json_data.items():
        merged_list = []

        for cve_list in cve_lists:
            merged_list.extend(cve_list)

        result[ip_address] = merged_list

    logger.debug(f"result: {result}")
    return result


def _get_cpe_23_str(cpe_string):
    """
    Convert a CPE string to CPE 2.3 formatted string.

    Args:
        cpe_string (str): CPE string to convert.

    Returns:
        str: The CPE 2.3 formatted string.
    """
    return CPE(cpe_string, CPE.VERSION_2_3).as_fs()


def getcpe(xmlfile: str) -> dict:
    """
    Extract CPE and CVE information from an XML file generated by Nmap.

    Args:
        xmlfile (str): The name of the XML file to parse.

    Returns:
        dict: A dictionary containing CPE and CVE information extracted from the XML file.

    """
    cpe, cve = {}, {}

    oo = xmltodict.parse(open(f'{_WIFI_XML_BASE_DIRECTORY}/{xmlfile}', 'r').read())
    o = json.loads(json.dumps(oo['nmaprun'], indent=4))

    logger.debug(f"Successfully loaded {xmlfile}")

    for ik in o['host']:
        if type(ik) is dict:
            i = ik
        else:
            i = o['host']

        lastportid = 0

        if '@addr' in i['address']:
            address = i['address']['@addr']
        elif type(i['address']) is list:
            for ai in i['address']:
                if ai['@addrtype'] == 'ipv4':
                    address = ai['@addr']

        cpe[address] = {}
        cve[address] = {}

        if 'ports' in i and 'port' in i['ports']:
            for pobj in i['ports']['port']:
                if type(pobj) is dict:
                    p = pobj
                else:
                    p = i['ports']['port']

                if lastportid == p['@portid']:
                    continue
                else:
                    lastportid = p['@portid']

                if 'service' in p:
                    if 'cpe' in p['service']:
                        if type(p['service']['cpe']) is list:
                            for cpei in p['service']['cpe']:
                                cpe[address][cpei] = cpei
                        else:
                            cpe[address][p['service']['cpe']] = p['service']['cpe']

                if 'script' in p:
                    if type(p['script']) is list:
                        for scripti in p['script']:
                            if 'elem' in scripti:
                                if type(scripti['elem']) is list:
                                    for elmi in scripti['elem']:
                                        if elmi['@key'] == 'cve':
                                            cve[address][elmi['#text']] = elmi['#text']

        if type(ik) is not dict:
            break

    res = {'cpe': cpe, 'cve': cve}
    logger.debug(f"found CVEs: {res}")
    return res


def getcve(xmlfile: str) -> None:
    """
    Extract CVE information from CPE data obtained from an XML file generated by Nmap.

    Args:
        xmlfile (str): The name of the XML file containing Nmap scan results.

    Returns:
        None: This function writes JSON files containing CVE information to the '/opt/notes/' directory.
    """

    scanfilemd5 = hashlib.md5(str(xmlfile).encode('utf-8')).hexdigest()
    cpecve = getcpe(xmlfile)
    cvejson = {}

    logger.debug(f"scanfilemd5: {scanfilemd5}")
    logger.debug(f"cpecve: {cpecve}")

    for i in cpecve['cpe']:
        if i not in cvejson:
            cvejson[i] = []

        for cpestr in cpecve['cpe'][i]:
            cpe23str = _get_cpe_23_str(cpestr)
            if re.search('^cpe:/([^:]+):([^:]+):([^:]+)(?::([^:]+))?$', cpestr):
                r = requests.get(f'{_CPE_API_URL}{cpe23str}')

                try:
                    response = r.json()
                except:
                    response = None

                if response is not None:
                    cves = extract_cve_ids(response)
                    cvejson[i].append(cves)

    cvejson = merge_and_flatten(cvejson)
    cvejson_full = {key: [] for key in cvejson.keys()}

    for i in cpecve['cve']:
        if i not in cvejson:
            cvejson[i] = []

        if i not in cvejson_full:
            cvejson_full[i] = []

        for cvestr in cvejson[i]:
            r = requests.get(f'{_CVE_API_URL}{cvestr}')
            if r.json() is not None:
                if r.json() is dict:
                    cvejson_full[i].append(r.json())
                else:
                    cvejson_full[i].append([r.json()])

    logger.debug(f"cvejson_full: {cvejson_full}")
    
    for i in cvejson_full:
        hostmd5 = hashlib.md5(str(i).encode('utf-8')).hexdigest()

        if type(cvejson_full[i]) is list and len(cvejson_full[i]) > 0:
            logger.debug(f"Writing file to {_NOTES_DIRECTORY}/{scanfilemd5}_{hostmd5}.cve")
            with open(f'{_NOTES_DIRECTORY}/{scanfilemd5}_{hostmd5}.cve', 'w') as f:
                f.write(json.dumps(cvejson_full[i], indent=4))
            logger.debug(f"Successfully written file to {_NOTES_DIRECTORY}/{scanfilemd5}_{hostmd5}.cve")

getcve(sys.argv[1])
